namespace BuildingBlocks.Behaviours;

/// <summary>
/// Represents a behavior used in a pipeline to log information about request handling and performance metrics.
/// </summary>
/// <typeparam name="TRequest">The type of the request.</typeparam>
/// <typeparam name="TResponse">The type of the response.</typeparam>
public class LoggingBehaviour<TRequest, TResponse> (ILogger<LoggingBehaviour<TRequest, TResponse>> logger): IPipelineBehavior<TRequest, TResponse> 
    where TRequest : notnull, IRequest<TResponse> 
    where TResponse : notnull
{
    /// <summary>
    /// Handles a request in the pipeline by logging information about request handling and performance metrics.
    /// </summary>
    /// <param name="request">The request to be handled.</param>
    /// <param name="next">The delegate representing the next handler in the pipeline.</param>
    /// <param name="cancellationToken">The cancellation token to cancel the operation.</param>
    /// <returns>The response generated by handling the request.</returns>
    public async Task<TResponse> Handle(TRequest request, RequestHandlerDelegate<TResponse> next, CancellationToken cancellationToken)
    {
        // Log the start of request handling, including request type, response type, and request data.
        logger.LogInformation("[START] Handle Request {Request}- Response={Response}-RequestData={RequestData}",
            typeof(TRequest).Name, typeof(TResponse).Name, request);

        // Start a timer to measure the time taken to handle the request.
        var timer = new Stopwatch();
        timer.Start();

        // Call the next handler in the pipeline and await the response.
        var response = await next();

        // Stop the timer and calculate the time taken to handle the request.
        timer.Stop();
        var timeTaken = timer.Elapsed;

        // If the time taken exceeds 3 seconds, log a warning about the performance.
        if (timeTaken.Seconds > 3)
            logger.LogWarning("[PERFORMANCE] The Request {Request} took {TimeTaken} seconds.", typeof(TRequest), timeTaken.Seconds);

        // Log the end of request handling, including request type and response type.
        logger.LogInformation("[END] Handled Request {Request} with {Response}", typeof(TRequest).Name,
            typeof(TResponse).Name);

        // Return the response.
        return response;
    }
}
